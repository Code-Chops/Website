@inherits LayoutComponentBase

@implements IDisposable

@if (ChildContent is not null)
{
	<span id="crossblade-main">
		<div id="crossblade-source" style="z-index: @(IsAnimating ? 0 : 1);">
			<span id="crossblade-container">
				@ChildContent
			</span>
		</div>
		<div id="crossblade-copy" class="@If(IsAnimating, "crossfade")">
			<span id="crossblade-copy-inner"></span>
		</div>
	</span>
}

<style>
	.crossfade {
		transition: opacity @(AnimationDuration)ms ease-in;
	}
	
	#crossblade-copy {
		opacity: @(IsAnimating ? 0 : 1);
		visibility: @(IsAnimating ? "visible" : "hidden");
		z-index: 101;
	}
</style>

@code {
	[Inject] protected IJSRuntime JsRuntime { get; set; } = null!;
	[Inject] protected NavigationManager NavigationManager { get; set; } = null!;
	[Inject] protected RenderEnvironment RenderEnvironment { get; set; } = null!;
	
	/// <summary>
	/// In milliseconds.
	/// </summary>
	[Parameter] public int AnimationDuration { get; set; } = 350;
	
	/// <summary>
	/// If true (default) crossfades occur between page navigations.
	/// </summary>
	[Parameter] public bool FireOnNavigationChanging { get; set; } = true;
	[Parameter] public RenderFragment? ChildContent { get; set; }
	
	private bool StartAnimating { get; set; }
	private bool IsAnimating { get; set; }
	private bool HasCopy { get; set; }
	private bool ShouldScrollUp { get; set; }
	private IJSObjectReference? JsObject { get; set; }
	private string? PreviousRelativeUrl { get; set; }
	private IDisposable? Registration { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (RenderEnvironment is RenderEnvironment.WebassemblyHost)
			return;

		// Unfortunately there is no correct way to detect prerendering for Blazor ServerSide: https://github.com/dotnet/aspnetcore/issues/17282.
		if (RenderEnvironment is RenderEnvironment.ServerSide)
		{
			try
			{
				JsObject = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/CodeChops.Website.RazorComponents/Crossblade.razor.js");
			}
			catch (Exception e) when (e is InvalidOperationException)
			{
				// Do nothing
			}
		}
		else
		{
			JsObject = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/CodeChops.Website.RazorComponents/Crossblade.razor.js");
		}

		if (FireOnNavigationChanging)
		{
			PreviousRelativeUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
			Registration = NavigationManager.RegisterLocationChangingHandler(OnNavigationChanging);
		}
		
		PreviousRelativeUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (RenderEnvironment is RenderEnvironment.WebassemblyHost)
			return;
		
		if (!HasCopy && StartAnimating && !firstRender)
			await StartAnimation();

		if (ShouldScrollUp)
			await ScrollUp();
	}

	private async Task ScrollUp()
	{
		if (JsObject is null || !ShouldScrollUp)
			return;
		
		await JsRuntime.InvokeVoidAsync("scrollUp", "crossblade-source");
		ShouldScrollUp = false;
	}

	private async ValueTask OnNavigationChanging(LocationChangingContext context)
	{
		var targetLocation = NavigationManager.ToBaseRelativePath(context.TargetLocation);
		if (targetLocation == PreviousRelativeUrl)
			return;

		PreviousRelativeUrl = targetLocation;
		
		await Execute();
	}

	public async Task Execute()
	{
		if (IsAnimating)
		{
			await StopAnimation();
			return;
		}

		StartAnimating = true;
		StateHasChanged();
	}

	private async Task StartAnimation()
	{
		if (!StartAnimating)
			return;
		
		StartAnimating = false;
		IsAnimating = true;
		ShouldScrollUp = true;
		
		await CopyElement();

		await Task.Delay(AnimationDuration)
			.ContinueWith(_ => StopAnimation());
	}

	private async Task StopAnimation()
	{
		IsAnimating = false;
		await RemoveElement();
		StateHasChanged();
	}

	private async Task CopyElement()
	{
		if (JsObject is null || HasCopy)
			return;
		
		await JsRuntime.InvokeAsync<string>("copyElement", "crossblade-source", "crossblade-copy");
		HasCopy = true;
	}
	
	private async Task RemoveElement()
	{
		if (JsObject is null || !HasCopy)
			return;

		await JsRuntime.InvokeVoidAsync("removeElement", "crossblade-copy");
		HasCopy = false;
	}

	public void Dispose()
	{
		Registration?.Dispose();
	}
}
