using System.Collections;
using System.Collections.Immutable;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace CodeChops.Website.RazorComponents.Resources;

//[GenerateListValueObject<CountryCode>(addCustomValidation: false, propertyIsPublic: true)]
public partial record struct SupportedCountryCodes;


// <auto-generated />
#nullable enable
#pragma warning disable CS0612 // Is deprecated (level 1)
#pragma warning disable CS0618 // Member is obsolete (level 2)

/// <summary>
/// An immutable value object with an immutable list of CountryCode as underlying value.
/// Extends: <see cref="SupportedCountryCodes"/>.
/// </summary>
[StructLayout(LayoutKind.Auto)]
public readonly partial record struct SupportedCountryCodes : IValueObject, IReadOnlyList<CountryCode>
{
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override string ToString() => this.ToDisplayString(new { Type = "CountryCode" }, extraText: this.Count.ToString());

	#region Equals
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override int GetHashCode() => this.Count == 0 ? 1 : 2;

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public bool Equals(SupportedCountryCodes other)
	{
		if (ReferenceEquals(this.Value, other.Value)) return true;
		if (other.Value is not { } otherValue) return false;
		return this.Value.SequenceEqual(otherValue);
	}

	#endregion

	#region Casts
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static implicit operator ImmutableList<CountryCode>(SupportedCountryCodes value) => value.Value;

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static explicit operator SupportedCountryCodes(ImmutableList<CountryCode> value) => new(value);

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static explicit operator SupportedCountryCodes(List<CountryCode> value) => new(value.ToImmutableList());
	#endregion

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public int Count => this.Value.Count;

	#region Enumerator
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public IEnumerator<CountryCode> GetEnumerator() => this.Value.GetEnumerator();
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();
	#endregion

	#region ValueProperty
	/// <summary>
    /// Get the underlying structural value.
    /// </summary>
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public ImmutableList<CountryCode> Value => this._value5019 ?? ImmutableList<CountryCode>.Empty;

    /// <summary>
    /// Backing field for the structural value. Don't use this field, use the Value property instead <see cref='Value'/>.
	/// </summary>
	[Obsolete("Don't use this field, use the Value property instead.")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	private readonly ImmutableList<CountryCode> _value5019 = ImmutableList<CountryCode>.Empty;
	#endregion

	#region Constructor
	[DebuggerHidden] 
	public SupportedCountryCodes(ImmutableList<CountryCode> value, Validator? validator = null)
	{
		validator ??= Validator.Get<SupportedCountryCodes>.Default;
		
		validator.GuardNotNull(value, null);

		this._value5019 = value;
	}

	#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
	[Obsolete("Don't use this empty constructor. A ImmutableList<CountryCode> should be provided when initializing SupportedCountryCodes.", true)]
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public SupportedCountryCodes() => throw new InvalidOperationException($"Don't use this empty constructor. A ImmutableList<CountryCode> should be provided when initializing SupportedCountryCodes.");
	#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor
	#endregion

	#region Factories
	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool TryCreate(ImmutableList<CountryCode> value, out SupportedCountryCodes createdObject)
		=> TryCreate(value, out createdObject, out _);

	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool TryCreate(ImmutableList<CountryCode> value, out SupportedCountryCodes createdObject, out Validator validator)
	{
		validator = Validator.Get<SupportedCountryCodes>.DoNotThrow();

		createdObject = Create(value, validator);
		
		if (!validator.IsValid)
			createdObject = default;			

		return validator.IsValid;
	}

	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static SupportedCountryCodes Create(ImmutableList<CountryCode> value, Validator? validator = null) 
		=> new(value, validator);
	#endregion

	#region TypeSpecific
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	
	public CountryCode this[int index] 
		=> Validator.Get<SupportedCountryCodes>.Default.GuardInRange(this.Value, index, errorCode: null)!;
	#endregion
}

#pragma warning restore CS0618 // Member is obsolete (level 2)
#pragma warning restore CS0612 // Is deprecated (level 1)
#nullable restore
