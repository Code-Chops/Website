using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace CodeChops.Website.RazorComponents.Resources;

// [GenerateStringValueObject(minimumLength: 2, maximumLength: 2, 
// 	stringComparison: StringComparison.Ordinal, allowNull: false, 
// 	stringFormat: StringFormat.Alpha, stringCaseConversion: StringCaseConversion.UpperInvariant, addCustomValidation: false, propertyIsPublic: true)]
public partial record struct CountryCode;


// <auto-generated />
#nullable enable
#pragma warning disable CS0612 // Is deprecated (level 1)
#pragma warning disable CS0618 // Member is obsolete (level 2)

/// <summary>
/// An immutable value type with an underlying value of UpperInvariant Alpha string.
/// Extends: <see cref="CountryCode"/>.
/// </summary>
[StructLayout(LayoutKind.Auto)]
public readonly partial record struct CountryCode : IValueObject, IComparable<CountryCode>, IEnumerable<char>
{
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override string ToString() => this.Value;

	#region Equals
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public override int GetHashCode() => String.GetHashCode(this.Value, StringComparison.Ordinal);

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public bool Equals(CountryCode other) => String.Equals(this.Value, other.Value, StringComparison.Ordinal);

	#endregion

	#region Comparison
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public int CompareTo(CountryCode other) => String.Compare(this.Value, other.Value, StringComparison.Ordinal);

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator <	(CountryCode left, CountryCode right)	=> left.CompareTo(right) <	0;
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator <=	(CountryCode left, CountryCode right)	=> left.CompareTo(right) <= 0;
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator >	(CountryCode left, CountryCode right)	=> left.CompareTo(right) >	0;
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool operator >=	(CountryCode left, CountryCode right)	=> left.CompareTo(right) >= 0;
	#endregion

	#region Casts
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static implicit operator string(CountryCode value) => value.Value;

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static explicit operator CountryCode(string value) => new(value);
	#endregion

	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public int Length => this.Value.Length;

	#region Enumerator
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public IEnumerator<char> GetEnumerator() => this.Value.GetEnumerator();
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();
	#endregion

	#region ValueProperty
	/// <summary>
    /// Get the underlying structural value.
    /// </summary>
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public string Value => this._value1275 ?? String.Empty;

    /// <summary>
    /// Backing field for the structural value. Don't use this field, use the Value property instead <see cref='Value'/>.
	/// </summary>
	[Obsolete("Don't use this field, use the Value property instead.")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	private readonly string _value1275 = String.Empty;
	#endregion

	#region Constructor
	[DebuggerHidden] 
	public CountryCode(string value, Validator? validator = null)
	{	
		validator ??= Validator.Get<CountryCode>.DoNotThrow();

		validator
			.GuardNotNull(value, null)
			.GuardRegex(value, "^[a-zA-Z]+$", null)
			.GuardInRange<int>(value.Length, 2, 2, null);

		this._value1275 = value.ToUpperInvariant();
	}

	#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor
	[Obsolete("Don't use this empty constructor. A String should be provided when initializing CountryCode.", true)]
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public CountryCode() => throw new InvalidOperationException($"Don't use this empty constructor. A String should be provided when initializing CountryCode.");
	#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor
	#endregion

	#region Factories
	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool TryCreate(string value, out CountryCode createdObject)
		=> TryCreate(value, out createdObject, out _);

	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static bool TryCreate(string value, out CountryCode createdObject, out Validator validator)
	{
		validator = Validator.Get<CountryCode>.DoNotThrow();
		createdObject = Create(value, validator);
		
		if (!validator.IsValid)
			createdObject = default;			

		return validator.IsValid;
	}
	
	[DebuggerHidden] 
	[EditorBrowsable(EditorBrowsableState.Never)]
	public static CountryCode Create(string value, Validator? validator = null) 
		=> new(value, validator);
	#endregion

	#region TypeSpecific
	[DebuggerHidden]
	[EditorBrowsable(EditorBrowsableState.Never)]
	public char? this[int index] 
		=> Validator.Get<CountryCode>.Default.GuardInRange(this.Value, index, errorCode: null)!;
	#endregion
}

#pragma warning restore CS0618 // Member is obsolete (level 2)
#pragma warning restore CS0612 // Is deprecated (level 1)
#nullable restore
