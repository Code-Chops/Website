@inherits LayoutComponentBase
@implements IDisposable

@if (ChildContent is not null)
{
	<span id="crossfade-main">
		<div id="crossfade-source" style="z-index: @(IsInTransition ? 0 : 1);">
			<span id="crossfade-container">
				@ChildContent
			</span>
		</div>
		<div id="crossfade-copy">
			@CopiedElement
		</div>
	</span>
}

<style>
	#crossfade-copy {
		transition: opacity @(AnimationDurationInMilliseconds)ms linear;
		opacity: @(IsInTransition ? 0 : 1);
		z-index: @(IsInTransition ? 101 : -1);
		visibility: @(IsInTransition ? "visible" : "hidden")
	}
</style>

@code {
	[Inject] public IJSRuntime JsRuntime { get; set; } = null!;
	[Parameter] public RenderFragment? ChildContent { get; set; }
	[Parameter] public MarkupString CopiedElement { get; set; }
	[Parameter] public int AnimationDurationInMilliseconds { get; set; } = 350;
	[Parameter] public bool PrerenderState { get; set; }
	[Inject] public NavigationManager NavigationManager { get; set; } = null!;
	[Inject] public RenderLocation RenderLocation { get; set; } = null!;
	[Parameter] public bool RegisterOnNavigationChanged { get; set; } = true;
	private bool IsInTransition { get; set; }
	private IJSObjectReference? JsObject { get; set; }
	private string? PreviousRelativeUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (RenderLocation is RenderedOnClient)
			JsObject = await ((IJSInProcessRuntime)JsRuntime).InvokeAsync<IJSObjectReference>("import", "./_content/CodeChops.Website.RazorComponents/Crossfade.razor.js");

		if (RegisterOnNavigationChanged)
		{
			PreviousRelativeUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
			NavigationManager.LocationChanged += OnNavigationChanged;
		}
	}

	protected override void OnAfterRender(bool firstRender)
	{
		// ReSharper disable once ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
		if (PrerenderState && !firstRender && RenderLocation is RenderedOnClient && CopiedElement.Value is null)
			LoadCrossfadeState();
	}

	private async void OnNavigationChanged(object? o, LocationChangedEventArgs e)
	{
		if (NavigationManager.ToBaseRelativePath(NavigationManager.Uri) == PreviousRelativeUrl)
			return;

		await ExecuteAsync();
	}

	public async Task ExecuteAsync()
	{
		if (!PrerenderState)
			LoadCrossfadeState();

		IsInTransition = true;

		StateHasChanged();

		await Task.Delay(AnimationDurationInMilliseconds).ContinueWith(_ =>
		{
			IsInTransition = false;
			CopiedElement = (MarkupString)null!;
			PreviousRelativeUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
			StateHasChanged();
		});
	}

	private void LoadCrossfadeState()
	{
		// ReSharper disable once ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract
		if (CopiedElement.Value is not null)
			return;

		if (JsObject is null) return;

		CopiedElement = (MarkupString)((IJSInProcessRuntime)JsRuntime).Invoke<string>("copyElement", "crossfade-source", "crossfade-copy", PrerenderState);

		StateHasChanged();
	}

	public void Dispose()
	{
		if (RegisterOnNavigationChanged)
			NavigationManager.LocationChanged -= OnNavigationChanged;
	}
}
