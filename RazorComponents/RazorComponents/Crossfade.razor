@inherits LayoutComponentBase
@implements IDisposable

@if (ChildContent is not null)
{
	<span id="crossfade-main">
		<div id="crossfade-source" style="z-index: @(IsAnimating ? 0 : 1);">
			<span id="crossfade-container">
				@ChildContent
			</span>
		</div>
		<div id="crossfade-copy">
			<span id="crossfade-copy-inner"></span>
		</div>
	</span>
}

<style>
	#crossfade-copy {
		transition: opacity @(AnimationDurationInMilliseconds)ms ease-in;
		opacity: @(IsAnimating ? 0 : 1);
		visibility: @(IsAnimating ? "visible" : "hidden");
		z-index: 101;
	}
</style>

@code {
	[Inject] public IJSRuntime JsRuntime { get; set; } = null!;
	[Inject] public NavigationManager NavigationManager { get; set; } = null!;
	[Inject] public RenderLocation RenderLocation { get; set; } = null!;
	[Parameter] public bool PrerenderState { get; set; }
	[Parameter] public int AnimationDurationInMilliseconds { get; set; } = 350;
	[Parameter] public bool RegisterOnNavigationChanging { get; set; } = true;
	[Parameter] public RenderFragment? ChildContent { get; set; }
	private bool StartAnimating { get; set; }
	private bool IsAnimating { get; set; }
	private bool HasCopy { get; set; }
	private bool ShouldScrollUp { get; set; }
	private IJSObjectReference? JsObject { get; set; }
	private string? PreviousRelativeUrl { get; set; }
	private IDisposable? Registration { get; set; }
	
	protected override async Task OnInitializedAsync()
	{
		if (RenderLocation is RenderedOnClient)
		{
			JsObject = await ((IJSInProcessRuntime)JsRuntime).InvokeAsync<IJSObjectReference>("import", "./_content/CodeChops.Website.RazorComponents/Crossfade.razor.js");

			if (RegisterOnNavigationChanging)
			{
				PreviousRelativeUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
				Registration = NavigationManager.RegisterLocationChangingHandler(OnNavigationChanging);
			}
			PreviousRelativeUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (StartAnimating && !firstRender && !HasCopy && RenderLocation is RenderedOnClient)
			await StartAnimation();
		
		if (ShouldScrollUp)
			ScrollUp();
	}

	private void ScrollUp()
	{
		ShouldScrollUp = false;
		((IJSInProcessRuntime)JsRuntime).InvokeVoid("scrollUp", "crossfade-source");
	}

	private ValueTask OnNavigationChanging(LocationChangingContext context)
	{
		var targetLocation = NavigationManager.ToBaseRelativePath(context.TargetLocation);
		if (targetLocation == PreviousRelativeUrl)
			return ValueTask.CompletedTask;

		PreviousRelativeUrl = targetLocation;
		
		Execute();

		return ValueTask.CompletedTask;
	}

	public void Execute()
	{
		if (IsAnimating)
			return;

		StartAnimating = true;
		StateHasChanged();
	}

	private Task StartAnimation()
	{
		StartAnimating = false;
		IsAnimating = true;
		ShouldScrollUp = true;
		CopyElement();

		return Task.Delay(AnimationDurationInMilliseconds).ContinueWith(_ =>
		{
			IsAnimating = false;
			RemoveElement();
			StateHasChanged();
		});
	}

	private void CopyElement()
	{
		if (JsObject is null || HasCopy)
			return;
		
		((IJSInProcessRuntime)JsRuntime).Invoke<string>("copyElement", "crossfade-source", "crossfade-copy", PrerenderState);
		HasCopy = true;
	}
	
	private void RemoveElement()
	{
		if (JsObject is null || !HasCopy)
			return;

		((IJSInProcessRuntime)JsRuntime).InvokeVoid("removeElement", "crossfade-copy");
		HasCopy = false;
	}

	public void Dispose()
	{
		Registration?.Dispose();
	}
}
