@using CodeChops.Website.Client.Pages.About
@using CodeChops.Website.Client.Pages.Blog
@using CodeChops.Website.Client.Pages.Home
@using CodeChops.Website.RazorComponents;
@using IProjectsResource = CodeChops.Website.Client.Pages.Projects.IProjectsResource
@inherits LayoutComponentBase

<div class="page">
    <MenuBar @ref="MenuBar"
            BackgroundColor="@(IsDarkMode ? new(hexColor: "#141313") : new(hexColor: "#f9f4f6"))"
            AccentColor="@Branding.Colors.Accent"
            TextColor="@Branding.Colors.Accent.ChangeBrightness(IsDarkMode ? 200 : -40)"
            HRefColor="@Branding.Colors.Accent.ChangeBrightness(IsDarkMode ? 40 : 0)"
            FontFamily="@Branding.FontFamily" 
            LogoPath="/favicon.ico" 
            Title="@Branding.Name" 
            ShowTitle="ShowTitle"
            Height="80"
            ShowLogo="false"
            Buttons="Buttons">
         
        <ColorModeSelector />
        <LanguageSelector />
    </MenuBar>
    <div class="border"></div>
    <Crossfade @ref="Crossfade" AnimationDurationInMilliseconds="350">
        <main>
            @Body
    
            <Footer></Footer>
        </main>
    </Crossfade>
</div>

<style>
    :root {
        --branding-text-weight:             @Branding.FontWeight;
        --branding-text-shadow:             @Branding.TextShadow;
        
        --branding-color-main:              @Branding.Colors.Main;
        --branding-color-accent:            @Branding.Colors.Accent;
        --branding-color-background:        @Branding.Colors.Background;
        
        --branding-color-main-rgb:          @Branding.Colors.Main.Rgb;
        --branding-color-accent-rgb:        @Branding.Colors.Accent.Rgb;
        --branding-color-background-rgb:    @Branding.Colors.Background.Rgb;
    }

    ::selection {
        background: @(ColorModeSelector.ColorMode == ColorMode.LightMode ? Branding.Colors.Accent.ChangeBrightness(140) : "var(--branding-color-accent)");
    }
</style>

@code
{
    [CascadingParameter] protected bool ShowTitle { get; set; } = true;

    private MenuBar? MenuBar { get; set; }
    private Crossfade Crossfade { get; set; } = null!;
    private ICollection<MenuButtonData> Buttons { get; set; } = null!;
    private static bool IsDarkMode => ColorModeSelector.ColorMode == ColorMode.DarkMode;
    private static IHomeResource HomeResource { get; set; } = null!;
    private static IBlogResource BlogResource { get; set;} = null!;
    private static IProjectsResource ProjectsResource { get; set;} = null!;
    private static IAboutResource AboutResource { get; set;} = null!;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;
    
    protected override void OnInitialized()
    {
        OnLanguageChanged();
        
        LanguageSelector.ChangedEvent += OnLanguageChanged;
    }

    private void OnLanguageChanged()
    {
        if (Crossfade is not null) Crossfade.ExecuteAsync(e: null);
        
        HomeResource = IHomeResource.Get();
        BlogResource = IBlogResource.Get();
        ProjectsResource = IProjectsResource.Get();
        AboutResource = IAboutResource.Get();
        
        Buttons = new MenuButtonData[]
            {
                new() { HRef="/",           Text = HomeResource.Title, OnClick = OnButtonClick },
                // new() { HRef="/blog",       Text=Pages.Blog.BlogResource.Title },
                new() { HRef="/projects",   Text = ProjectsResource.Title, OnClick = OnButtonClick },
                new() { HRef="/about",      Text = AboutResource.Title, OnClick = OnButtonClick},
            };
        
        StateHasChanged();
    }

    private void OnButtonClick(EventArgs e, MenuButtonData button)
    {
        if (button.HRef is not null && button.HRef.Trim('/') != this.NavigationManager.ToBaseRelativePath(this.NavigationManager.Uri)) 
            this.Crossfade.ExecuteAsync(e);
    }
}