@using CodeChops.Website.Client.Pages.Projects
@using CodeChops.Website.Client.Pages.About
@using CodeChops.Website.Client.Pages.Home
@using CodeChops.Website.RazorComponents.Navigation.Menu
@inherits LayoutComponentBase

<div class="page">
    <MenuBar @ref="MenuBar"
             BackgroundColor="@(IsDarkMode ? new(hexColor: "#181616") : new(hexColor: "#f9f4f6"))"
             AccentColor="@Branding.Colors.Accent"
             TextColor="@Branding.Colors.Accent.ChangeBrightness(IsDarkMode ? 200 : -20)"
             HRefColor="@Branding.Colors.Accent.ChangeBrightness(IsDarkMode ? 80 : -20)"
             FontFamily="@Branding.FontFamily" 
             LogoPath="/favicon.png"
             Title="@Branding.Name" 
             ShowTitle="ShowTitle"
             Height="80"
             ShowLogo="false"
             Buttons="Buttons"
             FadeOut="false">
         
        <ColorModeSelector />
        <LanguageSelector />
    </MenuBar>
    
    <div class="border"></div>
    
    <Crossfade @ref="Crossfade" AnimationDurationInMilliseconds="350">
        <main id="main">
            @Body
            <Footer></Footer>
        </main>
    </Crossfade>
</div>

<style>
    :root {
        --branding-text-weight:             @Branding.FontWeight;
        --branding-text-spacing:            @Branding.TextSpacing;
        
        --branding-color-main:              @Branding.Colors.Main;
        --branding-color-accent:            @Branding.Colors.Accent;
        --branding-color-background:        @Branding.Colors.Background;
        
        --branding-color-main-rgb:          @Branding.Colors.Main.Rgb;
        --branding-color-accent-rgb:        @Branding.Colors.Accent.Rgb;
        --branding-color-background-rgb:    @Branding.Colors.Background.Rgb;
    }

    ::selection {
        background: @(ColorModeSelector.Value == ColorMode.LightMode ? Branding.Colors.Accent.ChangeBrightness(140) : "var(--branding-color-accent)");
    }
</style>

@code
{
    [CascadingParameter] protected bool ShowTitle { get; set; } = true;

    private MenuBar? MenuBar { get; set; }
    private Crossfade? Crossfade { get; set; }
    private ICollection<MenuButtonData> Buttons { get; set; } = null!;
    private static bool IsDarkMode => ColorModeSelector.Value == ColorMode.DarkMode;
    [Inject] public NavigationManager NavigationManager { get; set; } = null!;

    protected override void OnInitialized()
    {
        OnLanguageChangedAsync();
        NavigationManager.LocationChanged += (_,_) => OnLanguageChangedAsync();
    }

    private void OnLanguageChangedAsync()
    {
        Buttons = new MenuButtonData[]
            {
                new() { HRef="/",           Text = HomeResource.Title },
                // new() { HRef="/blog",       Text=Pages.Blog.BlogResource.Title },
                new() { HRef="/projects",   Text = ProjectResource.Title },
                new() { HRef="/about",      Text = AboutResource.Title },
            };
        
        StateHasChanged();
    }
}
