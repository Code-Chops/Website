@using System.Globalization
@using System.Collections.Immutable;

@if (FlagsByLanguageCode.Any())
{
	<span class="menu-setting small-screen-hide" @onkeydown="@(async e => await ChangeLanguageAsync(e))">
		<MenuButton Data="@MenuButtonData">@CurrentLanguageFlag</MenuButton>
	</span>
}

@code {
	[Inject] private IJSRuntime JsRuntime { get; set; } = null!;
	[Inject] private NavigationManager UriHelper { get; set; } = null!;
	
	internal static event Action? ChangedEvent;

	/// <summary>
	/// The first culture is the default culture.
	/// </summary>
	public static IReadOnlyDictionary<string, string> FlagsByLanguageCode { get; } = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) 
	{ 
		["en"] = "🇬🇧", ["nl"] = "🇳🇱"
	};
	public static ImmutableList<string> SupportedLanguages { get; } = FlagsByLanguageCode.Keys.ToImmutableList();
	public string CurrentLanguageFlag { get; set; } = null!;
	public static string CurrentLanguageCode { get; private set; } = FlagsByLanguageCode.First().Key;
	private MenuButtonData MenuButtonData { get; set; }
	
	protected override void OnInitialized()
	{
		this.MenuButtonData = new() { OnClick = (e, _) => ChangeLanguageAsync(e) };
		SetCurrentLanguageFlag();
	}

	private async Task ChangeLanguageAsync(EventArgs? e)
	{
		if (e is KeyboardEventArgs { Code: not "Enter" and not "NumpadEnter" }) return;

		var index = SupportedLanguages.IndexOf(CurrentLanguageCode);
		var newIndex = (index + 1) % SupportedLanguages.Count;
		var newLanguage = SupportedLanguages[newIndex];

		SetNewCulture(newLanguage);
		SetCurrentLanguageFlag();

		ChangedEvent?.Invoke();
		
		await JsRuntime.InvokeVoidAsync("blazorCulture.set", newLanguage);
	}

	public static void SetNewCulture(string languageCode)
	{
		CurrentLanguageCode = languageCode;
	}

	private void SetCurrentLanguageFlag()
	{
		if (!FlagsByLanguageCode.TryGetValue(CurrentLanguageCode, out var flag)) return;

		CurrentLanguageFlag = flag;
		StateHasChanged();
	}
}