@inherits ResourcedComponent
@using System.Globalization
@using System.Collections.Immutable;
@using CodeChops.Website.RazorComponents.Navigation.Menu

@if (LanguageCodeList.Count > 0)
{
	<span class="menu-setting small-screen-hide" @onkeydown="@(async e => await ChangeLanguageAsync(e))">
		<MenuButton Data="@MenuButtonData">@CurrentCountryFlag</MenuButton>
	</span>
}

@code {
	[Inject] private NavigationManager UriHelper { get; set; } = null!;

	public string CurrentCountryFlag { get; set; } = null!;

	private MenuButtonData MenuButtonData { get; set; }
	
	//  The Unicode scalar offset between the ascii letter and the region code.
	private static readonly int UnicodeScalarValueOffset; // 127397
	private static ImmutableList<LanguageCode> LanguageCodeList { get; }
	
	static LanguageSelector()
	{
		if (!Rune.TryGetRuneAt("🇦", 0, out var rune)) 
			throw new InvalidOperationException($"Could not determine {nameof(UnicodeScalarValueOffset)}.");
		
		UnicodeScalarValueOffset = rune.Value - new Rune('A').Value;

		LanguageCodeList = SupportedLanguageCodes.GetValues().ToImmutableList();
	}

	protected override void OnComponentInitialized()
	{
		MenuButtonData = new() { OnClick = (e, _) => ChangeLanguageAsync(e) };
		SetCountryFlag();
	}

	private async Task ChangeLanguageAsync(EventArgs? e)
	{
		if (e is KeyboardEventArgs { Code: not "Enter" and not "NumpadEnter" }) return;

		var index = LanguageCodeList.IndexOf(LanguageCodeCache.CurrentLanguageCode);
		var newIndex = (index + 1) % LanguageCodeList.Count;
		var newLanguageCode = LanguageCodeList[newIndex];

		LanguageCodeCache.SetCurrentLanguageCode(newLanguageCode);
		SetCountryFlag();

		TriggerLanguageChangedEvent();
		
		await JsRuntime.InvokeVoidAsync("blazorCulture.set", newLanguageCode.Value);
	}

	private void SetCountryFlag()
	{
		var flag = GetFlagFromCountryCode(LanguageCodeCache.CurrentLanguageCode.GetCountryCode());

		CurrentCountryFlag = flag;
		StateHasChanged();
	}
	
	private static string GetFlagFromCountryCode(string countryCode)
	{
		return countryCode
			.EnumerateRunes()
			.Aggregate(new StringBuilder(), (sb, rune) => sb.Append(new Rune(rune.Value + UnicodeScalarValueOffset)))
			.ToString();
	}
}
