@ChildContent

@if (!ShowSplashScreen && !IsRenderedOnClient)
    return;

@if (ShowSplashScreen)
{
    @* Style not placed in CSS in order to be displayed immediately *@
    <div id="overlay"
         class="@(If(IsLoading is not true, "dissolveOverlay"))"
         style=" position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: var(--overlay-background-color, white); pointer-events: none; z-index: 1001;">
    </div>
}

<a id="clickableLogo" href="@If(IsLoading is not true, "/")">
    <div id="logo" class="@(IsLoading is true && ShowSplashScreen ? "splashLogo" : "attachedLogo")" >
        <div id="logoBackground"></div>
        <div id="logoM"></div>
        <div id="logoA"></div>
        <div id="logoX"></div>
        <div id="logoB"></div>
    </div>
</a>

@if (IsLoading is true && ShowSplashScreen)
{
    <div class="loading-progress-text"></div>
}

<style>
    .attachedLogo {
        animation-duration: @(ShowSplashScreen ? "1s" : "0s");
    }

    :root {
        --animation-duration: @(!IsRenderedOnClient ? "0.25s" : "0s" );
        --animation-delay: @(!IsRenderedOnClient ? "0.25s" : "0s");
    }
</style>

@code {
    [Inject] private RenderEnvironment RenderEnvironment { get; set; } = null!;

    [Parameter] public RenderFragment ChildContent { get; set; } = null!;

    private bool IsRenderedOnClient => RenderEnvironment is not RenderEnvironment.WebassemblyHost;
    private bool? IsLoading { get; set; } = true;

    private const bool ShowSplashScreen = true;

    protected override void OnInitialized()
    {
        if (IsRenderedOnClient)
            IsLoading = false;

        Console.WriteLine(Branding.BannerText);
    }

    protected override void OnParametersSet()
    {
        IsLoading ??= !IsRenderedOnClient;

        base.OnParametersSet();
    }

}
