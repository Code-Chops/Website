@using System.Globalization
@using System.Resources
@using Microsoft.Extensions.Localization;
@using System.Collections.Immutable;

@if (FlagsByLanguageCode.Any())
{
	<MenuButton OnClick=@ChangeLanguage>@CurrentLanguageFlag</MenuButton>
}

@code {
	[Inject] public IJSRuntime JsRuntime { get; set; } = null!;
	[Inject] NavigationManager UriHelper { get; set; } = null!;
	
	internal static event Action LanguageChangedEvent = null!;

	/// <summary>
	/// The first culture is the default culture.
	/// </summary>
	public static IReadOnlyDictionary<string, string> FlagsByLanguageCode { get; set; } = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase) { ["EN"] = "🇬🇧", ["NL"] = "🇳🇱" };
	public static ImmutableList<string> SupportedLanguages { get; set; } = FlagsByLanguageCode.Keys.ToImmutableList();
	public string CurrentLanguageFlag { get; set; } = null!;

	protected override void OnInitialized()
    {
   		this.SetCurrentLanguageFlag();
	}

	private void ChangeLanguage(MouseEventArgs args)
	{
		var index = SupportedLanguages.IndexOf(CultureInfo.DefaultThreadCurrentUICulture!.TwoLetterISOLanguageName.ToUpperInvariant());
		var newIndex = (index + 1) % SupportedLanguages.Count;
		var newLanguageCode = SupportedLanguages[newIndex];

		SetNewCulture(newLanguageCode, this.JsRuntime);
		this.SetCurrentLanguageFlag();

		LanguageChangedEvent.Invoke();
	}

	public static void SetNewCulture(string languageCode, IJSRuntime jsRuntime)
	{
		if (jsRuntime is not IJSInProcessRuntime inProcessRuntime) return;

		var culture = CultureInfo.GetCultureInfo(languageCode);
		if (culture is null) return;

		CultureInfo.CurrentCulture = culture;
		CultureInfo.DefaultThreadCurrentCulture = culture;
		CultureInfo.DefaultThreadCurrentUICulture = culture;

		inProcessRuntime.InvokeVoid("blazorCulture.set", culture.Name);
	}

	private void SetCurrentLanguageFlag()
	{
		var languageCode = CultureInfo.CurrentCulture.TwoLetterISOLanguageName;

		if (!FlagsByLanguageCode.TryGetValue(languageCode, out var flag)) return;

		this.CurrentLanguageFlag = flag;
	}
}