@page "/projects"
@inherits ResourcedComponent

<Content>
	<span class="title text-center">
		<Title Value="@ProjectResource.Title"></Title>
	</span>

	<div class="grid">
		@foreach (var group in ParameterGroups)
		{
			<DynamicComponent Type="@typeof(ProjectThumbnail)" Parameters="@group"/>
		}
	</div>
</Content>

@code {
	private static List<string> RandomProjectNames { get; }
	private static List<Dictionary<string, object>> ParameterGroups { get; set; } = null!;
	
	private static string[] ImplementedProjects { get; } =
	{
		nameof(ProjectOverviewTitleResource.GenericMath),
		nameof(ProjectOverviewTitleResource.DomainModeling),
		nameof(ProjectOverviewTitleResource.MagicEnums),
		nameof(ProjectOverviewTitleResource.ImplementationDiscovery),
		nameof(ProjectOverviewTitleResource.Geometry),
		nameof(ProjectOverviewTitleResource.SourceGenerationUtilities),
		nameof(ProjectOverviewTitleResource.LightResources),
		nameof(ProjectOverviewTitleResource.Crossblade),
	};
		
	static ProjectOverview()
	{
		var random = new Random();
		RandomProjectNames = ProjectOverviewTitleResource.GetValues().OrderBy(_ => random.Next()).ToList();
	}
	
	protected override void OnComponentInitialized()
	{
		CreateView();
		LanguageChangedEvent += CreateView;
	}
	
	private static void CreateView()
	{
		ParameterGroups = ProjectOverviewTitleResource
			.GetMembers()
			.OrderBy(member => RandomProjectNames.IndexOf(member.Name))
			.Select(member => new Dictionary<string, object>()
			{
				["Code"] = member.Name,
				["Title"] = member.Value,
				["Text"] = (MarkupString)ProjectOverviewTextResource.GetSingleMember(member.Name),
				["ImagePath"] = $"images/projects/{member.Name}.png",
				["RelativePath"] = ImplementedProjects.Contains(member.Name) 
						? member.Name 
						: null!,
			})
			.ToList();
	}
}
