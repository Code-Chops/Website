@using CodeChops.DomainDrivenDesign.DomainModeling.Serialization
<a class="project" href="@RelativePath?.Write($"/projects/{RelativePath}/")" id="@ThumbnailId">
	<div class="text">
		<h2>@Title</h2>
		<span class="small-screen-hide">@Text</span>
	</div>
	<span class="image-container border show">
		<img class="image noSelect" src="@ImagePath" alt="@Title" loading="lazy" id="@ImageId" />
	</span>
</a>

@code {
	[Parameter] public required string Title { get; set; } = null!;
	[Parameter] public required MarkupString Text { get; set; }
	[Parameter] public required string ImagePath { get; set; } = null!;
	[Parameter] public string? RelativePath { get; set; }
	[Inject] public IJSRuntime JsRuntime { get; set; } = null!;

	private string ImageId { get; set; } = null!;
	private string ThumbnailId { get; set; } = null!;

	protected override void OnInitialized()
	{
		var id = Title.Replace(' ', '_');
		ImageId = $"Image{id}";
		ThumbnailId = $"Thumbnail{id}";
	}

	protected override async Task OnAfterRenderAsync(bool isFirstRender)
	{
		if (isFirstRender) 
			await JsRuntime.InvokeVoidAsync("loadImageAndShow", ImageId, ThumbnailId);
	}
}
