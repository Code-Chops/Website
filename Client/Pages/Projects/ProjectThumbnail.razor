@using CodeChops.DomainModeling.Serialization

<a class="project" href="@GetPath()" id="@ThumbnailId" target=@(IsDocumentation ? "_self" : "_blank")>
	<div class="text">
		<h2>@Title</h2>
		<span class="small-screen-hide">@Text</span>
		@If(!IsImplemented, (MarkupString)ProjectResource.Error)
	</div>
	<span class="image-container border show">
		<img class="image noSelect" src="@ImagePath" alt="@Title" loading="lazy" id="@ImageId" />
	</span>
</a>

@code {
	[Parameter] public required string Code { get; set; } = null!;
	[Parameter] public required string Title { get; set; } = null!;
	[Parameter] public required MarkupString Text { get; set; }
	[Parameter] public required string ImagePath { get; set; } = null!;
	[Parameter] public required bool IsImplemented { get; set; }
	
	/// <summary>
	/// Should be a relative path when <see cref="IsDocumentation"/> is enabled, otherwise an absolute path.
	/// </summary>
	[Parameter] public string? Path { get; set; }
	[Parameter] public bool IsDocumentation { get; set; } = true;
	[Inject] public IJSRuntime JsRuntime { get; set; } = null!;

	private string ImageId { get; set; } = null!;
	private string ThumbnailId { get; set; } = null!;

	protected override void OnInitialized()
	{
		ImageId = $"Image{Code}";
		ThumbnailId = $"Thumbnail{Code}";
	}

	protected override async Task OnAfterRenderAsync(bool isFirstRender)
	{
		await JsRuntime.InvokeVoidAsync("addThumbnailVisualizations", ImageId, ThumbnailId);
	}

	private string? GetPath()
	{
		if (!IsImplemented) 
			return null;
		
		return IsDocumentation 
			? Path?.Write($"/projects/{Path}/") 
			: Path;
	}
}
